package squidpony.squidai;

import java.awt.*;
import java.util.HashMap;

/**
 * Static utilities for use in AOE and anything else that might need HashMaps of Point keys to Double values.
 * Created by Tommy Ettinger on 7/13/2015.
 */
public class AreaUtils {
    /**
     * This takes a 2D boolean array and returns a HashMap of Point keys to Double values, but will only use the value
     * 1.0, and only for positions in map that have as their boolean element true.
     * @param map width by height, commonly generated by FOV methods
     * @return a HashMap of Point keys to Double values, but the only value used is 1.0
     */
    public static HashMap<Point, Double> arrayToHashMap(boolean[][] map)
    {
        HashMap<Point, Double> ret = new HashMap<>();
        for(int i = 0; i < map.length; i++)
        {
            for(int j = 0; j < map[i].length; j++)
            {
                if(map[i][j])
                    ret.put(new Point(i, j), 1.0);
            }
        }
        return ret;
    }

    /**
     * This takes a 2D double array called map and returns a HashMap of Point keys to Double values, and will have a key
     * for every position in map that is greater than 0.0, with values equal to those in map.
     * @param map width by height, commonly generated by FOV methods
     * @return a HashMap of Point keys to Double values, with values all greater than 0.0
     */
    public static HashMap<Point, Double> arrayToHashMap(double[][] map)
    {
        HashMap<Point, Double> ret = new HashMap<>();
        for(int i = 0; i < map.length; i++)
        {
            for(int j = 0; j < map[i].length; j++)
            {
                if(map[i][j] > 0.0)
                    ret.put(new Point(i, j), map[i][j]);
            }
        }
        return ret;
    }

    /**
     * This takes a 2D double array and returns a HashMap of Point keys to Double values, but will only use the value
     * 1.0, and only does this if the passed double[][] has a value at that position that is greater than cutoff.
     * For example, a cutoff of 0.3 will make all elements in the 2D array that are 0.3 or less be ignored and not put
     * into the HashMap, but all elements that are greater than 0.3 will be placed in as 1.0.
     * @param map width by height, commonly generated by FOV methods
     * @param cutoff any elements greater than this will be 1.0 in the return, anything else will be ignored
     * @return a HashMap of Point keys to Double values, but the only value used is 1.0
     */
    public static HashMap<Point, Double> arrayToHashMap(double[][] map, double cutoff)
    {
        HashMap<Point, Double> ret = new HashMap<>();
        for(int i = 0; i < map.length; i++)
        {
            for(int j = 0; j < map[i].length; j++)
            {
                if(map[i][j] > cutoff)
                    ret.put(new Point(i, j), 1.0);
            }
        }
        return ret;
    }

    /**
     * This takes a DijkstraMap that has already completed a scan() and returns a HashMap of Point keys to Double
     * values, and will have a key for every position that was reached in the DijkstraMap, with 1.0 as the only value.
     * @param dijkstra a DijkstraMap that has already done its scan
     * @return a HashMap of Point keys to Double values, with values all greater than 0.0
     */
    public static HashMap<Point, Double> dijkstraToHashMap(DijkstraMap dijkstra)
    {
        HashMap<Point, Double> ret = new HashMap<>();
        double[][] map = dijkstra.gradientMap;
        for(int i = 0; i < map.length; i++)
        {
            for(int j = 0; j < map[i].length; j++)
            {
                if(map[i][j] < DijkstraMap.WALL)
                    ret.put(new Point(i, j), 1.0);
            }
        }
        return ret;
    }
}
